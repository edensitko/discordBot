rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidRole(role) {
      return role in ['admin', 'user'];
    }

    function isValidTimestamp(timestamp) {
      return timestamp is timestamp && timestamp <= request.time;
    }

    function hasValidUserFields() {
      let data = request.resource.data;
      return data.keys().hasAll(['email', 'name', 'role', 'createdAt', 'lastLogin']) &&
        data.email is string &&
        data.name is string &&
        isValidRole(data.role) &&
        isValidTimestamp(data.createdAt) &&
        isValidTimestamp(data.lastLogin);
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        isOwner(userId) && 
        hasValidUserFields();
      allow update: if isAuthenticated() && 
        (isAdmin() || isOwner(userId)) && 
        hasValidUserFields();
      allow delete: if isAdmin();
    }

    // User roles collection
    match /userRoles/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        isOwner(userId) && 
        request.resource.data.keys().hasAll(['role']) &&
        isValidRole(request.resource.data.role);
      allow update: if isAuthenticated() && 
        (isAdmin() || isOwner(userId)) && 
        request.resource.data.keys().hasAll(['role']) &&
        isValidRole(request.resource.data.role);
      allow delete: if isAdmin();
    }

    // Customers collection
    match /customers/{customerId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Projects collection
    match /projects/{projectId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Tasks collection
    match /tasks/{taskId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated();
      allow delete: if isAdmin() || 
        (isAuthenticated() && resource.data.assigneeId == request.auth.uid);
    }

    // Posts collection
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() &&
        request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isAdmin() || 
        (isAuthenticated() && resource.data.authorId == request.auth.uid);
    }

    // Stories collection
    match /stories/{storyId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() &&
        request.resource.data.authorId == request.auth.uid;
      allow delete: if isAdmin() || 
        (isAuthenticated() && resource.data.authorId == request.auth.uid);
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
